{"ast":null,"code":"var _jsxFileName = \"/home/user/internship/react/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport { FILTERS, SORT } from \"./constants.js\";\nimport TodoForm from \"./components/TasksBox/TodoForm\";\nimport Filters from \"./components/Filters/Filters\";\nimport PagesButton from \"./components/Pagination/PagesButton\";\nimport TasksBox from \"./components/TasksBox/TasksBox\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [tasks, setTasks] = useState([]);\n  const [filters, setFilter] = useState(FILTERS.ALL);\n  const [filtredArray, setFiltredArray] = useState([]);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [pagesCount, setPagesCount] = useState(1);\n  const [sort, setSort] = useState(SORT.LAST);\n  useEffect(() => {\n    if (currentPage > pagesCount) {\n      setCurrentPage(1);\n    }\n  }, [pagesCount]);\n\n  const flipPage = _ref => {\n    let {\n      target: {\n        className\n      }\n    } = _ref;\n\n    switch (className) {\n      case \"pagination__forward\":\n        if (currentPage === pagesCount) {\n          break;\n        }\n\n        setCurrentPage(currentPage + 1);\n        break;\n\n      case \"pagination__back\":\n        if (currentPage === 1) {\n          break;\n        }\n\n        setCurrentPage(currentPage - 1);\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  const changeCurrentPage = number => {\n    setCurrentPage(number);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"ToDo\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TodoForm, {\n      setTasks: setTasks,\n      tasks: tasks\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Filters, {\n      setFilter: setFilter,\n      setSort: setSort,\n      setFiltredArray: setFiltredArray,\n      setPagesCount: setPagesCount,\n      filters: filters,\n      tasks: tasks,\n      sort: sort,\n      filtredArray: filtredArray\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TasksBox, {\n      currentPage: currentPage,\n      tasks: tasks,\n      setTasks: setTasks,\n      filtredArray: filtredArray\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), pagesCount > 1 ? /*#__PURE__*/_jsxDEV(PagesButton, {\n      flipPage: flipPage,\n      pagesCount: pagesCount,\n      currentPage: currentPage,\n      changeCurrentPage: changeCurrentPage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }, this) : \"\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"KdAQHMP7Pr6Eki/tvlZ+aQyo5l8=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","useEffect","FILTERS","SORT","TodoForm","Filters","PagesButton","TasksBox","App","tasks","setTasks","filters","setFilter","ALL","filtredArray","setFiltredArray","currentPage","setCurrentPage","pagesCount","setPagesCount","sort","setSort","LAST","flipPage","target","className","changeCurrentPage","number"],"sources":["/home/user/internship/react/src/App.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\n\nimport \"./App.css\";\nimport { FILTERS, SORT } from \"./constants.js\";\n\nimport TodoForm from \"./components/TasksBox/TodoForm\";\nimport Filters from \"./components/Filters/Filters\";\nimport PagesButton from \"./components/Pagination/PagesButton\";\nimport TasksBox from \"./components/TasksBox/TasksBox\";\n\nfunction App() {\n  const [tasks, setTasks] = useState([]);\n  const [filters, setFilter] = useState(FILTERS.ALL);\n  const [filtredArray, setFiltredArray] = useState([]);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [pagesCount, setPagesCount] = useState(1);\n  const [sort, setSort] = useState(SORT.LAST);\n\n  useEffect(() => {\n    if (currentPage > pagesCount) {\n      setCurrentPage(1);\n    }\n  }, [pagesCount]);\n\n  const flipPage = ({target: {className}}) => {\n    \n    switch (className) {\n      case \"pagination__forward\":\n        if (currentPage === pagesCount) {\n          break;\n        }\n        setCurrentPage(currentPage + 1);\n        break;\n      case \"pagination__back\":\n        if (currentPage === 1) {\n          break;\n        }\n        setCurrentPage(currentPage - 1);\n        break;\n      default:\n        break;\n    }\n  };\n\n  const changeCurrentPage = (number) => {\n    setCurrentPage(number);\n  };\n\n  return (\n    <main>\n      <h1>ToDo</h1>\n      <TodoForm setTasks={setTasks} tasks={tasks} />\n      <Filters\n        setFilter={setFilter}\n        setSort={setSort}\n        setFiltredArray={setFiltredArray}\n        setPagesCount={setPagesCount}\n        filters={filters}\n        tasks={tasks}\n        sort={sort}\n        filtredArray={filtredArray}\n      />\n      <TasksBox\n        currentPage={currentPage}\n        tasks={tasks}\n        setTasks={setTasks}\n        filtredArray={filtredArray}\n      />\n      {pagesCount > 1 ? (\n        <PagesButton\n          flipPage={flipPage}\n          pagesCount={pagesCount}\n          currentPage={currentPage}\n          changeCurrentPage={changeCurrentPage}\n        />\n      ) : (\n        \"\"\n      )}\n    </main>\n  );\n}\n\nexport default App;\n"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AAEA,OAAO,WAAP;AACA,SAASC,OAAT,EAAkBC,IAAlB,QAA8B,gBAA9B;AAEA,OAAOC,QAAP,MAAqB,gCAArB;AACA,OAAOC,OAAP,MAAoB,8BAApB;AACA,OAAOC,WAAP,MAAwB,qCAAxB;AACA,OAAOC,QAAP,MAAqB,gCAArB;;;AAEA,SAASC,GAAT,GAAe;EAAA;;EACb,MAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBV,QAAQ,CAAC,EAAD,CAAlC;EACA,MAAM,CAACW,OAAD,EAAUC,SAAV,IAAuBZ,QAAQ,CAACE,OAAO,CAACW,GAAT,CAArC;EACA,MAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCf,QAAQ,CAAC,EAAD,CAAhD;EACA,MAAM,CAACgB,WAAD,EAAcC,cAAd,IAAgCjB,QAAQ,CAAC,CAAD,CAA9C;EACA,MAAM,CAACkB,UAAD,EAAaC,aAAb,IAA8BnB,QAAQ,CAAC,CAAD,CAA5C;EACA,MAAM,CAACoB,IAAD,EAAOC,OAAP,IAAkBrB,QAAQ,CAACG,IAAI,CAACmB,IAAN,CAAhC;EAEArB,SAAS,CAAC,MAAM;IACd,IAAIe,WAAW,GAAGE,UAAlB,EAA8B;MAC5BD,cAAc,CAAC,CAAD,CAAd;IACD;EACF,CAJQ,EAIN,CAACC,UAAD,CAJM,CAAT;;EAMA,MAAMK,QAAQ,GAAG,QAA2B;IAAA,IAA1B;MAACC,MAAM,EAAE;QAACC;MAAD;IAAT,CAA0B;;IAE1C,QAAQA,SAAR;MACE,KAAK,qBAAL;QACE,IAAIT,WAAW,KAAKE,UAApB,EAAgC;UAC9B;QACD;;QACDD,cAAc,CAACD,WAAW,GAAG,CAAf,CAAd;QACA;;MACF,KAAK,kBAAL;QACE,IAAIA,WAAW,KAAK,CAApB,EAAuB;UACrB;QACD;;QACDC,cAAc,CAACD,WAAW,GAAG,CAAf,CAAd;QACA;;MACF;QACE;IAdJ;EAgBD,CAlBD;;EAoBA,MAAMU,iBAAiB,GAAIC,MAAD,IAAY;IACpCV,cAAc,CAACU,MAAD,CAAd;EACD,CAFD;;EAIA,oBACE;IAAA,wBACE;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QADF,eAEE,QAAC,QAAD;MAAU,QAAQ,EAAEjB,QAApB;MAA8B,KAAK,EAAED;IAArC;MAAA;MAAA;MAAA;IAAA,QAFF,eAGE,QAAC,OAAD;MACE,SAAS,EAAEG,SADb;MAEE,OAAO,EAAES,OAFX;MAGE,eAAe,EAAEN,eAHnB;MAIE,aAAa,EAAEI,aAJjB;MAKE,OAAO,EAAER,OALX;MAME,KAAK,EAAEF,KANT;MAOE,IAAI,EAAEW,IAPR;MAQE,YAAY,EAAEN;IARhB;MAAA;MAAA;MAAA;IAAA,QAHF,eAaE,QAAC,QAAD;MACE,WAAW,EAAEE,WADf;MAEE,KAAK,EAAEP,KAFT;MAGE,QAAQ,EAAEC,QAHZ;MAIE,YAAY,EAAEI;IAJhB;MAAA;MAAA;MAAA;IAAA,QAbF,EAmBGI,UAAU,GAAG,CAAb,gBACC,QAAC,WAAD;MACE,QAAQ,EAAEK,QADZ;MAEE,UAAU,EAAEL,UAFd;MAGE,WAAW,EAAEF,WAHf;MAIE,iBAAiB,EAAEU;IAJrB;MAAA;MAAA;MAAA;IAAA,QADD,GAQC,EA3BJ;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAgCD;;GAtEQlB,G;;KAAAA,G;AAwET,eAAeA,GAAf"},"metadata":{},"sourceType":"module"}